describe("The native array is a built-in iterable object",(function(){const t=["a","B","see"];describe("the iterator",(function(){it("an array has an iterator, which is a function",(function(){const e=typeof t[Symbol.iterator];assert.equal(e,"function")})),it("can be looped with `for-of`, which expects an iterable",(function(){let e=0;for(let n of t)e++;assert.equal(e,t.length)}))})),describe("the iterator protocol",(function(){it("calling `next()` on an iterator returns an object according to the iterator protocol",(function(){const e=t[Symbol.iterator]().next();assert.deepEqual(e,{done:!1,value:"a"})})),it("the after-last element has done=true",(function(){const t=[][Symbol.iterator]().next();assert.deepEqual(t,{done:!0,value:void 0})}))}))})),describe("The native string is a built-in iterable object",(function(){const t="abc";describe("string is iterable",(function(){it("the string`s object key `Symbol.iterator` is a function",(function(){const e=typeof t[Symbol.iterator];assert.equal(e,"function")})),it("use `Array.from()` to make an array out of any iterable",(function(){const e=Array.from(t);assert.deepEqual(e,["a","b","c"])}))})),describe("a string`s iterator",(function(){let e;beforeEach((function(){e=t[Symbol.iterator]()})),it("has a special string representation",(function(){const t=e.toString();assert.equal(t,"[object String Iterator]")})),it("`iterator.next()` returns an object according to the iterator protocol",(function(){const t=e.next();assert.deepEqual(t,{done:!1,value:"a"})})),it("the after-last call to `iterator.next()` says done=true, no more elements",(function(){e.next(),e.next(),e.next(),e.next(),assert.equal(e.next().done,!0)}))}))})),describe("A simple iterable without items inside, implementing the right protocol",()=>{function t(){}describe("the `iteratorFunction` needs to comply to the iterator protocol",(function(){it("must return an object",(function(){assert.equal(typeof{next:function(){return{done:!0}}},"object")})),it("the object must have a function assigned to a key `next`",(function(){assert.equal(typeof(void 0).next,"function")})),it("calling `next()` must return an object with `{done: true}`",(function(){assert.deepEqual((void 0).next(),{done:!0})}))})),beforeEach((function(){})),describe("the iterable",(function(){it("must be an object",(function(){assert.equal("undefined","object")})),it("must have the iterator function assigned to the key `Symbol.iterator`",(function(){assert.equal((void 0)[Symbol.iterator],t)}))})),describe("using the iterable",(function(){it("it contains no values",(function(){let t;for(let e of void 0)t+=e;assert.equal(t,"")})),it("has no `.length` property",(function(){assert.equal(void 0,!1)})),describe("can be converted to an array",(function(){it("using `Array.from()`",(function(){assert.equal(Array.isArray(void 0),!0)})),it("where `.length` is still 0",(function(){const t=(void 0).length;assert.equal(t,0)}))}))}))});